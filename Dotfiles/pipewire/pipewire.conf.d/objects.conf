# Pipewire configuration (graph objects aka virtual nodes)
# Merges with default configuration: /usr/share/pipewire/pipewire.conf

## RESOURCES
# > man 5 pipewire.conf
# https://docs.pipewire.org/page_man_pipewire_conf_5.html#pipewire_conf__context_objects
# https://docs.pipewire.org/page_man_pipewire_conf_5.html#pipewire_conf__command_execution

# > Virtual device nodes
# https://gitlab.freedesktop.org/pipewire/pipewire/-/wikis/Virtual-Devices#single-nodes

# > Node properties
# Stream nodes: https://docs.pipewire.org/page_man_pipewire-client_conf_5.html#client_conf__stream_properties
# All PW keys (wireplumber adds more): https://docs.pipewire.org/group__pw__keys.html#ga7983296afaca4d7edac60714fa92565b

## OVERVIEW
# Default objects ( pipewire.conf - 1.0.5 ): Dummy-Driver Freewheel-Driver

# We use the adapter factory to create virtual *devices*
# This is necessary for OBS to monitor the device as an input source
# With stock configuration, Wireplumber only respects target.object on stream nodes (we are creating device nodes)
# Thus, the auto-linking functionality depends upon our modified wireplumber scripts as well

## VIRTUAL DEVICES
# TODO: Consider moving this to a Wireplumber configuration via a feature instead
#		^^ Would require that we can control the node's name and description at the least
context.objects = [
	{	## APPLICATIONS - "Exclusive" apps (notably games / resolve / vscodium if it had sound)
		## 				> Usually only one of these runs at a time, they can be thought of as "foreground" apps
		factory = adapter
		args = {
			factory.name			= support.null-audio-sink
			media.class				= Audio/Sink				# Append '/Virtual' to disable device being selectable (alternatively Stream/Input/Audio)

			## BEHAVIOR
			node.name				= "routing.applications"
			node.description		= "Apps"
			node.passive			= false						# Streams should always be active
			# node.autoconnect		= true						# Defaults to true, might only apply to streams?
			object.linger			= true

			## AUDIO
			# audio.position		= [ AUX0 AUX1 ]
			# audio.rate			= 48000						# UNUSED: This forces the rate of the virtual device (useful for monitoring, esp with OBS)
			stream.dont-remix		= true						# TODO: Might be necessary to keep channels as L/R
			monitor.channel-volumes	= true						# Changing node volume also applies to the monitor ports
			monitor.passthrough		= true

			## ROUTING
			## No longer in use (replaced by wireplumber.conf.d/devices.conf -> device.routes)
			# media.route			= "applications"			# Custom property for routing functionality
			# target.object			= "alsa_output.usb-Focusrite_Scarlett_18i20_USB_P9CZXTW0C83711-00.pro-output-0"
			# target.ports			= [ 0 1 ]					# Custom property for routing functionality
		}
	}
	{	## MEDIA - Dedicated music / video applications
		## 		 > Multiple streams may exist at once (i.e. Firefox is included here)
		factory = adapter
		args = {
			factory.name			= support.null-audio-sink
			media.class				= Audio/Sink

			node.name				= "routing.media"
			node.description		= "Music"
			node.passive			= false
			object.linger			= true

			stream.dont-remix		= true
			monitor.channel-volumes	= true
			monitor.passthrough		= true
		}
	}
	{	## VOICE - Dedicated communications applications
		## 		 > Examples include Discord, MSTeams, Zoom, Skype, etc.
		factory = adapter
		args = {
			factory.name			= support.null-audio-sink
			media.class				= Audio/Sink

			node.name				= "routing.voice"
			node.description		= "Voice"
			node.passive			= false
			object.linger			= true

			stream.dont-remix		= true
			monitor.channel-volumes	= true
			monitor.passthrough		= true
		}
	}
	{	## STREAM - Broadcasting / content creation related streams
		## 		  > Almost exclusively used by the OBS monitor
		factory = adapter
		args = {
			factory.name			= support.null-audio-sink
			media.class				= Audio/Sink

			node.name				= "routing.stream"
			node.description		= "Stream"
			node.passive			= false
			object.linger			= true

			stream.dont-remix		= true
			monitor.channel-volumes	= true
			monitor.passthrough		= true
		}
	}
	{	## SYSTEM - Default sink
		## 		  > Handles "system sounds" as well as miscellaneous or unsorted sources
		factory = adapter
		args = {
			factory.name			= support.null-audio-sink
			media.class				= Audio/Sink

			node.name				= "routing.system"
			node.description		= "System"
			node.passive			= false
			object.linger			= true

			stream.dont-remix		= true
			monitor.channel-volumes	= true
			monitor.passthrough		= true
		}
	}
	{	## MICROPHONE (Post-filter)
		factory = adapter
		args = {
			factory.name			= support.null-audio-sink
			audio.position			= [ AUX0 AUX1 ]
			stream.dont-remix		= true
			monitor.channel-volumes	= true
			monitor.passthrough		= true
			node.name				= "input.sterling"
			node.description		= "Sterling Mic"
			node.passive			= false
			object.linger			= true
			media.class				= Audio/Duplex
				# ^^ Audio/Source/Virtual : Pulse (or something) is weird and virtual mic nodes need the '/Virtual'	
				# A duplex is nice because I can route the playback monitors to the mic to port audio straight to discord
		}
	}
	{	## MICROPHONE (Audio interface proxy / pre-filter)
		factory = adapter
		args = {
			factory.name			= support.null-audio-sink
			audio.position			= [ AUX0 AUX1 ]
			stream.dont-remix		= true
			monitor.channel-volumes	= true
			monitor.passthrough		= true
			node.name				= "routing.input-2"		# Connect the node directly to the device
			node.description		= "Input (AUX2)"
			node.passive			= false
			object.linger			= true
			media.class				= Audio/Source/Virtual
		}
	}
	{	## MONITOR - Merges routing streams for output to single-"channel" devices
		## 		   > A wpexec script (WORK IN PROGRESS) can be used to toggle links between virtual nodes and the monitor (hence we use a duplex)
		factory = adapter
		args = {
			factory.name			= support.null-audio-sink
			media.class				= Audio/Duplex

			node.name				= "routing.monitor"
			node.description		= "Monitor"
			node.passive			= false
			object.linger			= true

			stream.dont-remix		= true
			monitor.channel-volumes	= true
			monitor.passthrough		= true
		}
	}
]

## -- UNUSED --
## LV2 PLUGINS (filter chain)
context.modules = [
	# {
	# 	name = libpipewire-module-filter-chain-lv2
	# 	flags = [ nofail ]			# Pipewire will not abort if the module fails to load
	# 	args = {}
	# }
]

## TODO: This needs to be moved elsewhere as carla gets launched before pipewire completes initalization
context.exec = [
	# {
	# 	path = "/bin/carla-rack"
	# 	args = "--nogui ${HOME}/.config/pipewire/filters/sterling.carxp"
	# }
]
